Terminals which are not used

   RETURN


State 46 conflicts: 4 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList FuncDeclList

    2 VarDeclList: /* empty */
    3            | VarDecl VarDeclList

    4 VarDecl: TYPE ID SEMICOLON

    5 FuncDeclList: /* empty */
    6             | FuncDecl FuncDeclList

    7 FuncDecl: FUNC TYPE ID LPAREN ParamList RPAREN Block

    8 ParamList: /* empty */
    9          | Param
   10          | Param COMMA ParamList

   11 Param: TYPE ID

   12 @1: /* empty */

   13 @2: /* empty */

   14 Block: LBRACK @1 VarDeclList StmtList @2 RBRACK

   15 StmtList: /* empty */
   16         | Stmt StmtList

   17 Stmt: ID EQ Expr SEMICOLON
   18     | WRITE ID SEMICOLON

   19 Expr: Expr BinOp Expr
   20     | ID
   21     | NUMBER

   22 BinOp: PLUS
   23      | MINUS
   24      | STAR
   25      | FSLASH


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 4 7 11
ID (259) 4 7 11 17 18 20
SEMICOLON (260) 4 17 18
LBRACK (261) 14
RBRACK (262) 14
LPAREN (263) 7
RPAREN (264) 7
COMMA (265) 10
EQ (266) 17
PLUS (267) 22
MINUS (268) 23
STAR (269) 24
FSLASH (270) 25
NUMBER (271) 21
WRITE (272) 18
RETURN (273)
FUNC (274) 7


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
Program (21)
    on left: 1, on right: 0
VarDeclList (22)
    on left: 2 3, on right: 1 3 14
VarDecl (23)
    on left: 4, on right: 3
FuncDeclList (24)
    on left: 5 6, on right: 1 6
FuncDecl (25)
    on left: 7, on right: 6
ParamList (26)
    on left: 8 9 10, on right: 7 10
Param (27)
    on left: 11, on right: 9 10
Block (28)
    on left: 14, on right: 7
@1 (29)
    on left: 12, on right: 14
@2 (30)
    on left: 13, on right: 14
StmtList (31)
    on left: 15 16, on right: 14 16
Stmt (32)
    on left: 17 18, on right: 16
Expr (33)
    on left: 19 20 21, on right: 17 19
BinOp (34)
    on left: 22 23 24 25, on right: 19


state 0

    0 $accept: . Program $end

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    Program      go to state 2
    VarDeclList  go to state 3
    VarDecl      go to state 4


state 1

    4 VarDecl: TYPE . ID SEMICOLON

    ID  shift, and go to state 5


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


state 3

    1 Program: VarDeclList . FuncDeclList

    FUNC  shift, and go to state 7

    $default  reduce using rule 5 (FuncDeclList)

    FuncDeclList  go to state 8
    FuncDecl      go to state 9


state 4

    3 VarDeclList: VarDecl . VarDeclList

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 10
    VarDecl      go to state 4


state 5

    4 VarDecl: TYPE ID . SEMICOLON

    SEMICOLON  shift, and go to state 11


state 6

    0 $accept: Program $end .

    $default  accept


state 7

    7 FuncDecl: FUNC . TYPE ID LPAREN ParamList RPAREN Block

    TYPE  shift, and go to state 12


state 8

    1 Program: VarDeclList FuncDeclList .

    $default  reduce using rule 1 (Program)


state 9

    6 FuncDeclList: FuncDecl . FuncDeclList

    FUNC  shift, and go to state 7

    $default  reduce using rule 5 (FuncDeclList)

    FuncDeclList  go to state 13
    FuncDecl      go to state 9


state 10

    3 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 3 (VarDeclList)


state 11

    4 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 4 (VarDecl)


state 12

    7 FuncDecl: FUNC TYPE . ID LPAREN ParamList RPAREN Block

    ID  shift, and go to state 14


state 13

    6 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 6 (FuncDeclList)


state 14

    7 FuncDecl: FUNC TYPE ID . LPAREN ParamList RPAREN Block

    LPAREN  shift, and go to state 15


state 15

    7 FuncDecl: FUNC TYPE ID LPAREN . ParamList RPAREN Block

    TYPE  shift, and go to state 16

    $default  reduce using rule 8 (ParamList)

    ParamList  go to state 17
    Param      go to state 18


state 16

   11 Param: TYPE . ID

    ID  shift, and go to state 19


state 17

    7 FuncDecl: FUNC TYPE ID LPAREN ParamList . RPAREN Block

    RPAREN  shift, and go to state 20


state 18

    9 ParamList: Param .
   10          | Param . COMMA ParamList

    COMMA  shift, and go to state 21

    $default  reduce using rule 9 (ParamList)


state 19

   11 Param: TYPE ID .

    $default  reduce using rule 11 (Param)


state 20

    7 FuncDecl: FUNC TYPE ID LPAREN ParamList RPAREN . Block

    LBRACK  shift, and go to state 22

    Block  go to state 23


state 21

   10 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 16

    $default  reduce using rule 8 (ParamList)

    ParamList  go to state 24
    Param      go to state 18


state 22

   14 Block: LBRACK . @1 VarDeclList StmtList @2 RBRACK

    $default  reduce using rule 12 (@1)

    @1  go to state 25


state 23

    7 FuncDecl: FUNC TYPE ID LPAREN ParamList RPAREN Block .

    $default  reduce using rule 7 (FuncDecl)


state 24

   10 ParamList: Param COMMA ParamList .

    $default  reduce using rule 10 (ParamList)


state 25

   14 Block: LBRACK @1 . VarDeclList StmtList @2 RBRACK

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 26
    VarDecl      go to state 4


state 26

   14 Block: LBRACK @1 VarDeclList . StmtList @2 RBRACK

    ID     shift, and go to state 27
    WRITE  shift, and go to state 28

    $default  reduce using rule 15 (StmtList)

    StmtList  go to state 29
    Stmt      go to state 30


state 27

   17 Stmt: ID . EQ Expr SEMICOLON

    EQ  shift, and go to state 31


state 28

   18 Stmt: WRITE . ID SEMICOLON

    ID  shift, and go to state 32


state 29

   14 Block: LBRACK @1 VarDeclList StmtList . @2 RBRACK

    $default  reduce using rule 13 (@2)

    @2  go to state 33


state 30

   16 StmtList: Stmt . StmtList

    ID     shift, and go to state 27
    WRITE  shift, and go to state 28

    $default  reduce using rule 15 (StmtList)

    StmtList  go to state 34
    Stmt      go to state 30


state 31

   17 Stmt: ID EQ . Expr SEMICOLON

    ID      shift, and go to state 35
    NUMBER  shift, and go to state 36

    Expr  go to state 37


state 32

   18 Stmt: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 38


state 33

   14 Block: LBRACK @1 VarDeclList StmtList @2 . RBRACK

    RBRACK  shift, and go to state 39


state 34

   16 StmtList: Stmt StmtList .

    $default  reduce using rule 16 (StmtList)


state 35

   20 Expr: ID .

    $default  reduce using rule 20 (Expr)


state 36

   21 Expr: NUMBER .

    $default  reduce using rule 21 (Expr)


state 37

   17 Stmt: ID EQ Expr . SEMICOLON
   19 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 40
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    STAR       shift, and go to state 43
    FSLASH     shift, and go to state 44

    BinOp  go to state 45


state 38

   18 Stmt: WRITE ID SEMICOLON .

    $default  reduce using rule 18 (Stmt)


state 39

   14 Block: LBRACK @1 VarDeclList StmtList @2 RBRACK .

    $default  reduce using rule 14 (Block)


state 40

   17 Stmt: ID EQ Expr SEMICOLON .

    $default  reduce using rule 17 (Stmt)


state 41

   22 BinOp: PLUS .

    $default  reduce using rule 22 (BinOp)


state 42

   23 BinOp: MINUS .

    $default  reduce using rule 23 (BinOp)


state 43

   24 BinOp: STAR .

    $default  reduce using rule 24 (BinOp)


state 44

   25 BinOp: FSLASH .

    $default  reduce using rule 25 (BinOp)


state 45

   19 Expr: Expr BinOp . Expr

    ID      shift, and go to state 35
    NUMBER  shift, and go to state 36

    Expr  go to state 46


state 46

   19 Expr: Expr . BinOp Expr
   19     | Expr BinOp Expr .

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    STAR    shift, and go to state 43
    FSLASH  shift, and go to state 44

    PLUS      [reduce using rule 19 (Expr)]
    MINUS     [reduce using rule 19 (Expr)]
    STAR      [reduce using rule 19 (Expr)]
    FSLASH    [reduce using rule 19 (Expr)]
    $default  reduce using rule 19 (Expr)

    BinOp  go to state 45
