Terminals which are not used

   DOT
   NEQ
   LT
   GT
   LTEQ
   GTEQ
   AND
   OR
   NOT


Rules never reduced

   50 ElseStmt: /* empty */


State 2 conflicts: 3 shift/reduce, 1 reduce/reduce
State 68 conflicts: 4 shift/reduce
State 71 conflicts: 1 shift/reduce, 7 reduce/reduce
State 78 conflicts: 4 shift/reduce
State 88 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList FuncDeclList StmtList
    2        | VarDeclList StmtList

    3 ArrayDeclList: /* empty */
    4              | ArrayDecl ArrayDeclList

    5 ArrayDecl: ARRAY TYPE ID LBRACK NUMBER RBRACK SEMICOLON

    6 VarDeclList: /* empty */
    7            | VarDeclList VarDecl

    8 VarDecl: TYPE ID SEMICOLON

    9 FuncDeclList: /* empty */
   10             | FuncDecl FuncDeclList

   11 FuncSignature: FUNC TYPE ID

   12 @1: /* empty */

   13 FuncDecl: FuncSignature @1 LPAREN ParamList RPAREN Block

   14 ParamList: /* empty */
   15          | Param
   16          | Param COMMA ParamList

   17 Param: TYPE ID

   18 InputParamList: /* empty */
   19               | InputParam
   20               | InputParam COMMA InputParamList

   21 InputParam: ID
   22           | NUMBER

   23 Block: LCURBRACK ArrayDeclList VarDeclList StmtList ReturnStmt RCURBRACK

   24 ReturnStmt: RETURN Expr SEMICOLON

   25 StmtList: /* empty */
   26         | Stmt StmtList

   27 Stmt: ID EQ Expr SEMICOLON
   28     | WriteStmt
   29     | ID LPAREN InputParamList RPAREN SEMICOLON
   30     | ID LBRACK NUMBER RBRACK EQ Expr SEMICOLON
   31     | IfStmt

   32 Expr: Expr BinOp Expr
   33     | ID
   34     | LPAREN TYPE RPAREN Expr
   35     | FLOAT
   36     | BOOL
   37     | NUMBER
   38     | ID LPAREN InputParamList RPAREN
   39     | ID LBRACK NUMBER RBRACK

   40 BinOp: PLUS
   41      | MINUS
   42      | STAR
   43      | BSLASH

   44 WriteStmt: WRITE ID SEMICOLON

   45 LogicExpr: Expr EQEQ Expr

   46 IfStmt: IF LPAREN LogicExpr RPAREN IfBlock ElseIfList
   47       | IF LPAREN LogicExpr RPAREN IfBlock ElseStmt

   48 ElseIfList: /* empty */
   49           | ELSE IfStmt ElseIfList

   50 ElseStmt: /* empty */
   51         | ELSE IfBlock

   52 IfBlock: LCURBRACK StmtList RCURBRACK


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 5 8 11 17 34
ID (259) 5 8 11 17 21 27 29 30 33 38 39 44
SEMICOLON (260) 5 8 24 27 29 30 44
LBRACK (261) 5 30 39
RBRACK (262) 5 30 39
LCURBRACK (263) 23 52
RCURBRACK (264) 23 52
LPAREN (265) 13 29 34 38 46 47
RPAREN (266) 13 29 34 38 46 47
COMMA (267) 16 20
DOT (268)
EQEQ (269) 45
NEQ (270)
LT (271)
GT (272)
LTEQ (273)
GTEQ (274)
AND (275)
OR (276)
NOT (277)
EQ (278) 27 30
PLUS (279) 40
MINUS (280) 41
STAR (281) 42
BSLASH (282) 43
BOOL (283) 36
NUMBER (284) 5 22 30 37 39
FLOAT (285) 35
WRITE (286) 44
RETURN (287) 24
FUNC (288) 11
ARRAY (289) 5
IF (290) 46 47
ELSE (291) 49 51


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
Program (38)
    on left: 1 2, on right: 0
ArrayDeclList (39)
    on left: 3 4, on right: 4 23
ArrayDecl (40)
    on left: 5, on right: 4
VarDeclList (41)
    on left: 6 7, on right: 1 2 7 23
VarDecl (42)
    on left: 8, on right: 7
FuncDeclList (43)
    on left: 9 10, on right: 1 10
FuncSignature (44)
    on left: 11, on right: 13
FuncDecl (45)
    on left: 13, on right: 10
@1 (46)
    on left: 12, on right: 13
ParamList (47)
    on left: 14 15 16, on right: 13 16
Param (48)
    on left: 17, on right: 15 16
InputParamList (49)
    on left: 18 19 20, on right: 20 29 38
InputParam (50)
    on left: 21 22, on right: 19 20
Block (51)
    on left: 23, on right: 13
ReturnStmt (52)
    on left: 24, on right: 23
StmtList (53)
    on left: 25 26, on right: 1 2 23 26 52
Stmt (54)
    on left: 27 28 29 30 31, on right: 26
Expr (55)
    on left: 32 33 34 35 36 37 38 39, on right: 24 27 30 32 34 45
BinOp (56)
    on left: 40 41 42 43, on right: 32
WriteStmt (57)
    on left: 44, on right: 28
LogicExpr (58)
    on left: 45, on right: 46 47
IfStmt (59)
    on left: 46 47, on right: 31 49
ElseIfList (60)
    on left: 48 49, on right: 46 49
ElseStmt (61)
    on left: 50 51, on right: 47
IfBlock (62)
    on left: 52, on right: 46 47 51


state 0

    0 $accept: . Program $end

    $default  reduce using rule 6 (VarDeclList)

    Program      go to state 1
    VarDeclList  go to state 2


state 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


state 2

    1 Program: VarDeclList . FuncDeclList StmtList
    2        | VarDeclList . StmtList
    7 VarDeclList: VarDeclList . VarDecl

    TYPE   shift, and go to state 4
    ID     shift, and go to state 5
    WRITE  shift, and go to state 6
    FUNC   shift, and go to state 7
    IF     shift, and go to state 8

    $end      reduce using rule 9 (FuncDeclList)
    $end      [reduce using rule 25 (StmtList)]
    ID        [reduce using rule 9 (FuncDeclList)]
    WRITE     [reduce using rule 9 (FuncDeclList)]
    IF        [reduce using rule 9 (FuncDeclList)]
    $default  reduce using rule 9 (FuncDeclList)

    VarDecl        go to state 9
    FuncDeclList   go to state 10
    FuncSignature  go to state 11
    FuncDecl       go to state 12
    StmtList       go to state 13
    Stmt           go to state 14
    WriteStmt      go to state 15
    IfStmt         go to state 16


state 3

    0 $accept: Program $end .

    $default  accept


state 4

    8 VarDecl: TYPE . ID SEMICOLON

    ID  shift, and go to state 17


state 5

   27 Stmt: ID . EQ Expr SEMICOLON
   29     | ID . LPAREN InputParamList RPAREN SEMICOLON
   30     | ID . LBRACK NUMBER RBRACK EQ Expr SEMICOLON

    LBRACK  shift, and go to state 18
    LPAREN  shift, and go to state 19
    EQ      shift, and go to state 20


state 6

   44 WriteStmt: WRITE . ID SEMICOLON

    ID  shift, and go to state 21


state 7

   11 FuncSignature: FUNC . TYPE ID

    TYPE  shift, and go to state 22


state 8

   46 IfStmt: IF . LPAREN LogicExpr RPAREN IfBlock ElseIfList
   47       | IF . LPAREN LogicExpr RPAREN IfBlock ElseStmt

    LPAREN  shift, and go to state 23


state 9

    7 VarDeclList: VarDeclList VarDecl .

    $default  reduce using rule 7 (VarDeclList)


state 10

    1 Program: VarDeclList FuncDeclList . StmtList

    ID     shift, and go to state 5
    WRITE  shift, and go to state 6
    IF     shift, and go to state 8

    $default  reduce using rule 25 (StmtList)

    StmtList   go to state 24
    Stmt       go to state 14
    WriteStmt  go to state 15
    IfStmt     go to state 16


state 11

   13 FuncDecl: FuncSignature . @1 LPAREN ParamList RPAREN Block

    $default  reduce using rule 12 (@1)

    @1  go to state 25


state 12

   10 FuncDeclList: FuncDecl . FuncDeclList

    FUNC  shift, and go to state 7

    $default  reduce using rule 9 (FuncDeclList)

    FuncDeclList   go to state 26
    FuncSignature  go to state 11
    FuncDecl       go to state 12


state 13

    2 Program: VarDeclList StmtList .

    $default  reduce using rule 2 (Program)


state 14

   26 StmtList: Stmt . StmtList

    ID     shift, and go to state 5
    WRITE  shift, and go to state 6
    IF     shift, and go to state 8

    $default  reduce using rule 25 (StmtList)

    StmtList   go to state 27
    Stmt       go to state 14
    WriteStmt  go to state 15
    IfStmt     go to state 16


state 15

   28 Stmt: WriteStmt .

    $default  reduce using rule 28 (Stmt)


state 16

   31 Stmt: IfStmt .

    $default  reduce using rule 31 (Stmt)


state 17

    8 VarDecl: TYPE ID . SEMICOLON

    SEMICOLON  shift, and go to state 28


state 18

   30 Stmt: ID LBRACK . NUMBER RBRACK EQ Expr SEMICOLON

    NUMBER  shift, and go to state 29


state 19

   29 Stmt: ID LPAREN . InputParamList RPAREN SEMICOLON

    ID      shift, and go to state 30
    NUMBER  shift, and go to state 31

    $default  reduce using rule 18 (InputParamList)

    InputParamList  go to state 32
    InputParam      go to state 33


state 20

   27 Stmt: ID EQ . Expr SEMICOLON

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 39


state 21

   44 WriteStmt: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 40


state 22

   11 FuncSignature: FUNC TYPE . ID

    ID  shift, and go to state 41


state 23

   46 IfStmt: IF LPAREN . LogicExpr RPAREN IfBlock ElseIfList
   47       | IF LPAREN . LogicExpr RPAREN IfBlock ElseStmt

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr       go to state 42
    LogicExpr  go to state 43


state 24

    1 Program: VarDeclList FuncDeclList StmtList .

    $default  reduce using rule 1 (Program)


state 25

   13 FuncDecl: FuncSignature @1 . LPAREN ParamList RPAREN Block

    LPAREN  shift, and go to state 44


state 26

   10 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 10 (FuncDeclList)


state 27

   26 StmtList: Stmt StmtList .

    $default  reduce using rule 26 (StmtList)


state 28

    8 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 8 (VarDecl)


state 29

   30 Stmt: ID LBRACK NUMBER . RBRACK EQ Expr SEMICOLON

    RBRACK  shift, and go to state 45


state 30

   21 InputParam: ID .

    $default  reduce using rule 21 (InputParam)


state 31

   22 InputParam: NUMBER .

    $default  reduce using rule 22 (InputParam)


state 32

   29 Stmt: ID LPAREN InputParamList . RPAREN SEMICOLON

    RPAREN  shift, and go to state 46


state 33

   19 InputParamList: InputParam .
   20               | InputParam . COMMA InputParamList

    COMMA  shift, and go to state 47

    $default  reduce using rule 19 (InputParamList)


state 34

   33 Expr: ID .
   38     | ID . LPAREN InputParamList RPAREN
   39     | ID . LBRACK NUMBER RBRACK

    LBRACK  shift, and go to state 48
    LPAREN  shift, and go to state 49

    $default  reduce using rule 33 (Expr)


state 35

   34 Expr: LPAREN . TYPE RPAREN Expr

    TYPE  shift, and go to state 50


state 36

   36 Expr: BOOL .

    $default  reduce using rule 36 (Expr)


state 37

   37 Expr: NUMBER .

    $default  reduce using rule 37 (Expr)


state 38

   35 Expr: FLOAT .

    $default  reduce using rule 35 (Expr)


state 39

   27 Stmt: ID EQ Expr . SEMICOLON
   32 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 51
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    STAR       shift, and go to state 54
    BSLASH     shift, and go to state 55

    BinOp  go to state 56


state 40

   44 WriteStmt: WRITE ID SEMICOLON .

    $default  reduce using rule 44 (WriteStmt)


state 41

   11 FuncSignature: FUNC TYPE ID .

    $default  reduce using rule 11 (FuncSignature)


state 42

   32 Expr: Expr . BinOp Expr
   45 LogicExpr: Expr . EQEQ Expr

    EQEQ    shift, and go to state 57
    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    STAR    shift, and go to state 54
    BSLASH  shift, and go to state 55

    BinOp  go to state 56


state 43

   46 IfStmt: IF LPAREN LogicExpr . RPAREN IfBlock ElseIfList
   47       | IF LPAREN LogicExpr . RPAREN IfBlock ElseStmt

    RPAREN  shift, and go to state 58


state 44

   13 FuncDecl: FuncSignature @1 LPAREN . ParamList RPAREN Block

    TYPE  shift, and go to state 59

    $default  reduce using rule 14 (ParamList)

    ParamList  go to state 60
    Param      go to state 61


state 45

   30 Stmt: ID LBRACK NUMBER RBRACK . EQ Expr SEMICOLON

    EQ  shift, and go to state 62


state 46

   29 Stmt: ID LPAREN InputParamList RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 63


state 47

   20 InputParamList: InputParam COMMA . InputParamList

    ID      shift, and go to state 30
    NUMBER  shift, and go to state 31

    $default  reduce using rule 18 (InputParamList)

    InputParamList  go to state 64
    InputParam      go to state 33


state 48

   39 Expr: ID LBRACK . NUMBER RBRACK

    NUMBER  shift, and go to state 65


state 49

   38 Expr: ID LPAREN . InputParamList RPAREN

    ID      shift, and go to state 30
    NUMBER  shift, and go to state 31

    $default  reduce using rule 18 (InputParamList)

    InputParamList  go to state 66
    InputParam      go to state 33


state 50

   34 Expr: LPAREN TYPE . RPAREN Expr

    RPAREN  shift, and go to state 67


state 51

   27 Stmt: ID EQ Expr SEMICOLON .

    $default  reduce using rule 27 (Stmt)


state 52

   40 BinOp: PLUS .

    $default  reduce using rule 40 (BinOp)


state 53

   41 BinOp: MINUS .

    $default  reduce using rule 41 (BinOp)


state 54

   42 BinOp: STAR .

    $default  reduce using rule 42 (BinOp)


state 55

   43 BinOp: BSLASH .

    $default  reduce using rule 43 (BinOp)


state 56

   32 Expr: Expr BinOp . Expr

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 68


state 57

   45 LogicExpr: Expr EQEQ . Expr

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 69


state 58

   46 IfStmt: IF LPAREN LogicExpr RPAREN . IfBlock ElseIfList
   47       | IF LPAREN LogicExpr RPAREN . IfBlock ElseStmt

    LCURBRACK  shift, and go to state 70

    IfBlock  go to state 71


state 59

   17 Param: TYPE . ID

    ID  shift, and go to state 72


state 60

   13 FuncDecl: FuncSignature @1 LPAREN ParamList . RPAREN Block

    RPAREN  shift, and go to state 73


state 61

   15 ParamList: Param .
   16          | Param . COMMA ParamList

    COMMA  shift, and go to state 74

    $default  reduce using rule 15 (ParamList)


state 62

   30 Stmt: ID LBRACK NUMBER RBRACK EQ . Expr SEMICOLON

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 75


state 63

   29 Stmt: ID LPAREN InputParamList RPAREN SEMICOLON .

    $default  reduce using rule 29 (Stmt)


state 64

   20 InputParamList: InputParam COMMA InputParamList .

    $default  reduce using rule 20 (InputParamList)


state 65

   39 Expr: ID LBRACK NUMBER . RBRACK

    RBRACK  shift, and go to state 76


state 66

   38 Expr: ID LPAREN InputParamList . RPAREN

    RPAREN  shift, and go to state 77


state 67

   34 Expr: LPAREN TYPE RPAREN . Expr

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 78


state 68

   32 Expr: Expr . BinOp Expr
   32     | Expr BinOp Expr .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    STAR    shift, and go to state 54
    BSLASH  shift, and go to state 55

    PLUS      [reduce using rule 32 (Expr)]
    MINUS     [reduce using rule 32 (Expr)]
    STAR      [reduce using rule 32 (Expr)]
    BSLASH    [reduce using rule 32 (Expr)]
    $default  reduce using rule 32 (Expr)

    BinOp  go to state 56


state 69

   32 Expr: Expr . BinOp Expr
   45 LogicExpr: Expr EQEQ Expr .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    STAR    shift, and go to state 54
    BSLASH  shift, and go to state 55

    $default  reduce using rule 45 (LogicExpr)

    BinOp  go to state 56


state 70

   52 IfBlock: LCURBRACK . StmtList RCURBRACK

    ID     shift, and go to state 5
    WRITE  shift, and go to state 6
    IF     shift, and go to state 8

    $default  reduce using rule 25 (StmtList)

    StmtList   go to state 79
    Stmt       go to state 14
    WriteStmt  go to state 15
    IfStmt     go to state 16


state 71

   46 IfStmt: IF LPAREN LogicExpr RPAREN IfBlock . ElseIfList
   47       | IF LPAREN LogicExpr RPAREN IfBlock . ElseStmt

    ELSE  shift, and go to state 80

    $end       reduce using rule 48 (ElseIfList)
    $end       [reduce using rule 50 (ElseStmt)]
    ID         reduce using rule 48 (ElseIfList)
    ID         [reduce using rule 50 (ElseStmt)]
    RCURBRACK  reduce using rule 48 (ElseIfList)
    RCURBRACK  [reduce using rule 50 (ElseStmt)]
    WRITE      reduce using rule 48 (ElseIfList)
    WRITE      [reduce using rule 50 (ElseStmt)]
    RETURN     reduce using rule 48 (ElseIfList)
    RETURN     [reduce using rule 50 (ElseStmt)]
    IF         reduce using rule 48 (ElseIfList)
    IF         [reduce using rule 50 (ElseStmt)]
    ELSE       [reduce using rule 48 (ElseIfList)]
    ELSE       [reduce using rule 50 (ElseStmt)]
    $default   reduce using rule 48 (ElseIfList)

    ElseIfList  go to state 81
    ElseStmt    go to state 82


state 72

   17 Param: TYPE ID .

    $default  reduce using rule 17 (Param)


state 73

   13 FuncDecl: FuncSignature @1 LPAREN ParamList RPAREN . Block

    LCURBRACK  shift, and go to state 83

    Block  go to state 84


state 74

   16 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 59

    $default  reduce using rule 14 (ParamList)

    ParamList  go to state 85
    Param      go to state 61


state 75

   30 Stmt: ID LBRACK NUMBER RBRACK EQ Expr . SEMICOLON
   32 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 86
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    STAR       shift, and go to state 54
    BSLASH     shift, and go to state 55

    BinOp  go to state 56


state 76

   39 Expr: ID LBRACK NUMBER RBRACK .

    $default  reduce using rule 39 (Expr)


state 77

   38 Expr: ID LPAREN InputParamList RPAREN .

    $default  reduce using rule 38 (Expr)


state 78

   32 Expr: Expr . BinOp Expr
   34     | LPAREN TYPE RPAREN Expr .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    STAR    shift, and go to state 54
    BSLASH  shift, and go to state 55

    PLUS      [reduce using rule 34 (Expr)]
    MINUS     [reduce using rule 34 (Expr)]
    STAR      [reduce using rule 34 (Expr)]
    BSLASH    [reduce using rule 34 (Expr)]
    $default  reduce using rule 34 (Expr)

    BinOp  go to state 56


state 79

   52 IfBlock: LCURBRACK StmtList . RCURBRACK

    RCURBRACK  shift, and go to state 87


state 80

   49 ElseIfList: ELSE . IfStmt ElseIfList
   51 ElseStmt: ELSE . IfBlock

    LCURBRACK  shift, and go to state 70
    IF         shift, and go to state 8

    IfStmt   go to state 88
    IfBlock  go to state 89


state 81

   46 IfStmt: IF LPAREN LogicExpr RPAREN IfBlock ElseIfList .

    $default  reduce using rule 46 (IfStmt)


state 82

   47 IfStmt: IF LPAREN LogicExpr RPAREN IfBlock ElseStmt .

    $default  reduce using rule 47 (IfStmt)


state 83

   23 Block: LCURBRACK . ArrayDeclList VarDeclList StmtList ReturnStmt RCURBRACK

    ARRAY  shift, and go to state 90

    $default  reduce using rule 3 (ArrayDeclList)

    ArrayDeclList  go to state 91
    ArrayDecl      go to state 92


state 84

   13 FuncDecl: FuncSignature @1 LPAREN ParamList RPAREN Block .

    $default  reduce using rule 13 (FuncDecl)


state 85

   16 ParamList: Param COMMA ParamList .

    $default  reduce using rule 16 (ParamList)


state 86

   30 Stmt: ID LBRACK NUMBER RBRACK EQ Expr SEMICOLON .

    $default  reduce using rule 30 (Stmt)


state 87

   52 IfBlock: LCURBRACK StmtList RCURBRACK .

    $default  reduce using rule 52 (IfBlock)


state 88

   49 ElseIfList: ELSE IfStmt . ElseIfList

    ELSE  shift, and go to state 93

    ELSE      [reduce using rule 48 (ElseIfList)]
    $default  reduce using rule 48 (ElseIfList)

    ElseIfList  go to state 94


state 89

   51 ElseStmt: ELSE IfBlock .

    $default  reduce using rule 51 (ElseStmt)


state 90

    5 ArrayDecl: ARRAY . TYPE ID LBRACK NUMBER RBRACK SEMICOLON

    TYPE  shift, and go to state 95


state 91

   23 Block: LCURBRACK ArrayDeclList . VarDeclList StmtList ReturnStmt RCURBRACK

    $default  reduce using rule 6 (VarDeclList)

    VarDeclList  go to state 96


state 92

    4 ArrayDeclList: ArrayDecl . ArrayDeclList

    ARRAY  shift, and go to state 90

    $default  reduce using rule 3 (ArrayDeclList)

    ArrayDeclList  go to state 97
    ArrayDecl      go to state 92


state 93

   49 ElseIfList: ELSE . IfStmt ElseIfList

    IF  shift, and go to state 8

    IfStmt  go to state 88


state 94

   49 ElseIfList: ELSE IfStmt ElseIfList .

    $default  reduce using rule 49 (ElseIfList)


state 95

    5 ArrayDecl: ARRAY TYPE . ID LBRACK NUMBER RBRACK SEMICOLON

    ID  shift, and go to state 98


state 96

    7 VarDeclList: VarDeclList . VarDecl
   23 Block: LCURBRACK ArrayDeclList VarDeclList . StmtList ReturnStmt RCURBRACK

    TYPE   shift, and go to state 4
    ID     shift, and go to state 5
    WRITE  shift, and go to state 6
    IF     shift, and go to state 8

    $default  reduce using rule 25 (StmtList)

    VarDecl    go to state 9
    StmtList   go to state 99
    Stmt       go to state 14
    WriteStmt  go to state 15
    IfStmt     go to state 16


state 97

    4 ArrayDeclList: ArrayDecl ArrayDeclList .

    $default  reduce using rule 4 (ArrayDeclList)


state 98

    5 ArrayDecl: ARRAY TYPE ID . LBRACK NUMBER RBRACK SEMICOLON

    LBRACK  shift, and go to state 100


state 99

   23 Block: LCURBRACK ArrayDeclList VarDeclList StmtList . ReturnStmt RCURBRACK

    RETURN  shift, and go to state 101

    ReturnStmt  go to state 102


state 100

    5 ArrayDecl: ARRAY TYPE ID LBRACK . NUMBER RBRACK SEMICOLON

    NUMBER  shift, and go to state 103


state 101

   24 ReturnStmt: RETURN . Expr SEMICOLON

    ID      shift, and go to state 34
    LPAREN  shift, and go to state 35
    BOOL    shift, and go to state 36
    NUMBER  shift, and go to state 37
    FLOAT   shift, and go to state 38

    Expr  go to state 104


state 102

   23 Block: LCURBRACK ArrayDeclList VarDeclList StmtList ReturnStmt . RCURBRACK

    RCURBRACK  shift, and go to state 105


state 103

    5 ArrayDecl: ARRAY TYPE ID LBRACK NUMBER . RBRACK SEMICOLON

    RBRACK  shift, and go to state 106


state 104

   24 ReturnStmt: RETURN Expr . SEMICOLON
   32 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 107
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    STAR       shift, and go to state 54
    BSLASH     shift, and go to state 55

    BinOp  go to state 56


state 105

   23 Block: LCURBRACK ArrayDeclList VarDeclList StmtList ReturnStmt RCURBRACK .

    $default  reduce using rule 23 (Block)


state 106

    5 ArrayDecl: ARRAY TYPE ID LBRACK NUMBER RBRACK . SEMICOLON

    SEMICOLON  shift, and go to state 108


state 107

   24 ReturnStmt: RETURN Expr SEMICOLON .

    $default  reduce using rule 24 (ReturnStmt)


state 108

    5 ArrayDecl: ARRAY TYPE ID LBRACK NUMBER RBRACK SEMICOLON .

    $default  reduce using rule 5 (ArrayDecl)
