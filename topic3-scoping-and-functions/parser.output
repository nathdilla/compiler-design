Terminals which are not used

   MINUS
   STAR
   FSLASH
   RETURN


State 42 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList FuncDeclList

    2 VarDeclList: /* empty */
    3            | VarDecl VarDeclList

    4 VarDecl: TYPE ID SEMICOLON

    5 FuncDeclList: /* empty */
    6             | FuncDecl FuncDeclList

    7 @1: /* empty */

    8 FuncDecl: FUNC TYPE ID LPAREN @1 ParamList RPAREN Block

    9 ParamList: /* empty */
   10          | Param
   11          | Param COMMA ParamList

   12 Param: TYPE ID

   13 Block: LBRACK VarDeclList StmtList RBRACK

   14 StmtList: /* empty */
   15         | Stmt StmtList

   16 Stmt: ID EQ Expr SEMICOLON
   17     | WRITE ID SEMICOLON

   18 Expr: Expr BinOp Expr
   19     | ID
   20     | NUMBER

   21 BinOp: PLUS


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 4 8 12
ID (259) 4 8 12 16 17 19
SEMICOLON (260) 4 16 17
LBRACK (261) 13
RBRACK (262) 13
LPAREN (263) 8
RPAREN (264) 8
COMMA (265) 11
EQ (266) 16
PLUS (267) 21
MINUS (268)
STAR (269)
FSLASH (270)
NUMBER (271) 20
WRITE (272) 17
RETURN (273)
FUNC (274) 8


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
Program (21)
    on left: 1, on right: 0
VarDeclList (22)
    on left: 2 3, on right: 1 3 13
VarDecl (23)
    on left: 4, on right: 3
FuncDeclList (24)
    on left: 5 6, on right: 1 6
FuncDecl (25)
    on left: 8, on right: 6
@1 (26)
    on left: 7, on right: 8
ParamList (27)
    on left: 9 10 11, on right: 8 11
Param (28)
    on left: 12, on right: 10 11
Block (29)
    on left: 13, on right: 8
StmtList (30)
    on left: 14 15, on right: 13 15
Stmt (31)
    on left: 16 17, on right: 15
Expr (32)
    on left: 18 19 20, on right: 16 18
BinOp (33)
    on left: 21, on right: 18


state 0

    0 $accept: . Program $end

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    Program      go to state 2
    VarDeclList  go to state 3
    VarDecl      go to state 4


state 1

    4 VarDecl: TYPE . ID SEMICOLON

    ID  shift, and go to state 5


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


state 3

    1 Program: VarDeclList . FuncDeclList

    FUNC  shift, and go to state 7

    $default  reduce using rule 5 (FuncDeclList)

    FuncDeclList  go to state 8
    FuncDecl      go to state 9


state 4

    3 VarDeclList: VarDecl . VarDeclList

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 10
    VarDecl      go to state 4


state 5

    4 VarDecl: TYPE ID . SEMICOLON

    SEMICOLON  shift, and go to state 11


state 6

    0 $accept: Program $end .

    $default  accept


state 7

    8 FuncDecl: FUNC . TYPE ID LPAREN @1 ParamList RPAREN Block

    TYPE  shift, and go to state 12


state 8

    1 Program: VarDeclList FuncDeclList .

    $default  reduce using rule 1 (Program)


state 9

    6 FuncDeclList: FuncDecl . FuncDeclList

    FUNC  shift, and go to state 7

    $default  reduce using rule 5 (FuncDeclList)

    FuncDeclList  go to state 13
    FuncDecl      go to state 9


state 10

    3 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 3 (VarDeclList)


state 11

    4 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 4 (VarDecl)


state 12

    8 FuncDecl: FUNC TYPE . ID LPAREN @1 ParamList RPAREN Block

    ID  shift, and go to state 14


state 13

    6 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 6 (FuncDeclList)


state 14

    8 FuncDecl: FUNC TYPE ID . LPAREN @1 ParamList RPAREN Block

    LPAREN  shift, and go to state 15


state 15

    8 FuncDecl: FUNC TYPE ID LPAREN . @1 ParamList RPAREN Block

    $default  reduce using rule 7 (@1)

    @1  go to state 16


state 16

    8 FuncDecl: FUNC TYPE ID LPAREN @1 . ParamList RPAREN Block

    TYPE  shift, and go to state 17

    $default  reduce using rule 9 (ParamList)

    ParamList  go to state 18
    Param      go to state 19


state 17

   12 Param: TYPE . ID

    ID  shift, and go to state 20


state 18

    8 FuncDecl: FUNC TYPE ID LPAREN @1 ParamList . RPAREN Block

    RPAREN  shift, and go to state 21


state 19

   10 ParamList: Param .
   11          | Param . COMMA ParamList

    COMMA  shift, and go to state 22

    $default  reduce using rule 10 (ParamList)


state 20

   12 Param: TYPE ID .

    $default  reduce using rule 12 (Param)


state 21

    8 FuncDecl: FUNC TYPE ID LPAREN @1 ParamList RPAREN . Block

    LBRACK  shift, and go to state 23

    Block  go to state 24


state 22

   11 ParamList: Param COMMA . ParamList

    TYPE  shift, and go to state 17

    $default  reduce using rule 9 (ParamList)

    ParamList  go to state 25
    Param      go to state 19


state 23

   13 Block: LBRACK . VarDeclList StmtList RBRACK

    TYPE  shift, and go to state 1

    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 26
    VarDecl      go to state 4


state 24

    8 FuncDecl: FUNC TYPE ID LPAREN @1 ParamList RPAREN Block .

    $default  reduce using rule 8 (FuncDecl)


state 25

   11 ParamList: Param COMMA ParamList .

    $default  reduce using rule 11 (ParamList)


state 26

   13 Block: LBRACK VarDeclList . StmtList RBRACK

    ID     shift, and go to state 27
    WRITE  shift, and go to state 28

    $default  reduce using rule 14 (StmtList)

    StmtList  go to state 29
    Stmt      go to state 30


state 27

   16 Stmt: ID . EQ Expr SEMICOLON

    EQ  shift, and go to state 31


state 28

   17 Stmt: WRITE . ID SEMICOLON

    ID  shift, and go to state 32


state 29

   13 Block: LBRACK VarDeclList StmtList . RBRACK

    RBRACK  shift, and go to state 33


state 30

   15 StmtList: Stmt . StmtList

    ID     shift, and go to state 27
    WRITE  shift, and go to state 28

    $default  reduce using rule 14 (StmtList)

    StmtList  go to state 34
    Stmt      go to state 30


state 31

   16 Stmt: ID EQ . Expr SEMICOLON

    ID      shift, and go to state 35
    NUMBER  shift, and go to state 36

    Expr  go to state 37


state 32

   17 Stmt: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 38


state 33

   13 Block: LBRACK VarDeclList StmtList RBRACK .

    $default  reduce using rule 13 (Block)


state 34

   15 StmtList: Stmt StmtList .

    $default  reduce using rule 15 (StmtList)


state 35

   19 Expr: ID .

    $default  reduce using rule 19 (Expr)


state 36

   20 Expr: NUMBER .

    $default  reduce using rule 20 (Expr)


state 37

   16 Stmt: ID EQ Expr . SEMICOLON
   18 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 39
    PLUS       shift, and go to state 40

    BinOp  go to state 41


state 38

   17 Stmt: WRITE ID SEMICOLON .

    $default  reduce using rule 17 (Stmt)


state 39

   16 Stmt: ID EQ Expr SEMICOLON .

    $default  reduce using rule 16 (Stmt)


state 40

   21 BinOp: PLUS .

    $default  reduce using rule 21 (BinOp)


state 41

   18 Expr: Expr BinOp . Expr

    ID      shift, and go to state 35
    NUMBER  shift, and go to state 36

    Expr  go to state 42


state 42

   18 Expr: Expr . BinOp Expr
   18     | Expr BinOp Expr .

    PLUS  shift, and go to state 40

    PLUS      [reduce using rule 18 (Expr)]
    $default  reduce using rule 18 (Expr)

    BinOp  go to state 41
