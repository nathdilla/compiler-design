Terminals which are not used

   LBRACK
   RBRACK
   MINUS
   STAR
   FSLASH
   RETURN


State 0 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: VarDeclList FuncDeclList StmtList

    2 VarDeclList: /* empty */
    3            | VarDecl VarDeclList

    4 VarDecl: TYPE ID SEMICOLON
    5        | TYPE ID

    6 FuncDeclList: /* empty */
    7             | FuncDecl FuncDeclList

    8 FuncDecl: TYPE ID LPAREN params RPAREN

    9 params: /* empty */
   10       | TYPE ID COMMA params
   11       | TYPE ID

   12 StmtList: /* empty */
   13         | Stmt StmtList

   14 Stmt: ID EQ Expr SEMICOLON
   15     | WRITE ID SEMICOLON

   16 Expr: Expr BinOp Expr
   17     | ID
   18     | NUMBER

   19 BinOp: PLUS


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE (258) 4 5 8 10 11
ID (259) 4 5 8 10 11 14 15 17
SEMICOLON (260) 4 14 15
LBRACK (261)
RBRACK (262)
LPAREN (263) 8
RPAREN (264) 8
COMMA (265) 10
EQ (266) 14
PLUS (267) 19
MINUS (268)
STAR (269)
FSLASH (270)
NUMBER (271) 18
WRITE (272) 15
RETURN (273)


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
Program (20)
    on left: 1, on right: 0
VarDeclList (21)
    on left: 2 3, on right: 1 3
VarDecl (22)
    on left: 4 5, on right: 3
FuncDeclList (23)
    on left: 6 7, on right: 1 7
FuncDecl (24)
    on left: 8, on right: 7
params (25)
    on left: 9 10 11, on right: 8 10
StmtList (26)
    on left: 12 13, on right: 1 13
Stmt (27)
    on left: 14 15, on right: 13
Expr (28)
    on left: 16 17 18, on right: 14 16
BinOp (29)
    on left: 19, on right: 16


state 0

    0 $accept: . Program $end

    TYPE  shift, and go to state 1

    TYPE      [reduce using rule 2 (VarDeclList)]
    $default  reduce using rule 2 (VarDeclList)

    Program      go to state 2
    VarDeclList  go to state 3
    VarDecl      go to state 4


state 1

    4 VarDecl: TYPE . ID SEMICOLON
    5        | TYPE . ID

    ID  shift, and go to state 5


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 6


state 3

    1 Program: VarDeclList . FuncDeclList StmtList

    TYPE  shift, and go to state 7

    $default  reduce using rule 6 (FuncDeclList)

    FuncDeclList  go to state 8
    FuncDecl      go to state 9


state 4

    3 VarDeclList: VarDecl . VarDeclList

    TYPE  shift, and go to state 1

    TYPE      [reduce using rule 2 (VarDeclList)]
    $default  reduce using rule 2 (VarDeclList)

    VarDeclList  go to state 10
    VarDecl      go to state 4


state 5

    4 VarDecl: TYPE ID . SEMICOLON
    5        | TYPE ID .

    SEMICOLON  shift, and go to state 11

    $default  reduce using rule 5 (VarDecl)


state 6

    0 $accept: Program $end .

    $default  accept


state 7

    8 FuncDecl: TYPE . ID LPAREN params RPAREN

    ID  shift, and go to state 12


state 8

    1 Program: VarDeclList FuncDeclList . StmtList

    ID     shift, and go to state 13
    WRITE  shift, and go to state 14

    $default  reduce using rule 12 (StmtList)

    StmtList  go to state 15
    Stmt      go to state 16


state 9

    7 FuncDeclList: FuncDecl . FuncDeclList

    TYPE  shift, and go to state 7

    $default  reduce using rule 6 (FuncDeclList)

    FuncDeclList  go to state 17
    FuncDecl      go to state 9


state 10

    3 VarDeclList: VarDecl VarDeclList .

    $default  reduce using rule 3 (VarDeclList)


state 11

    4 VarDecl: TYPE ID SEMICOLON .

    $default  reduce using rule 4 (VarDecl)


state 12

    8 FuncDecl: TYPE ID . LPAREN params RPAREN

    LPAREN  shift, and go to state 18


state 13

   14 Stmt: ID . EQ Expr SEMICOLON

    EQ  shift, and go to state 19


state 14

   15 Stmt: WRITE . ID SEMICOLON

    ID  shift, and go to state 20


state 15

    1 Program: VarDeclList FuncDeclList StmtList .

    $default  reduce using rule 1 (Program)


state 16

   13 StmtList: Stmt . StmtList

    ID     shift, and go to state 13
    WRITE  shift, and go to state 14

    $default  reduce using rule 12 (StmtList)

    StmtList  go to state 21
    Stmt      go to state 16


state 17

    7 FuncDeclList: FuncDecl FuncDeclList .

    $default  reduce using rule 7 (FuncDeclList)


state 18

    8 FuncDecl: TYPE ID LPAREN . params RPAREN

    TYPE  shift, and go to state 22

    $default  reduce using rule 9 (params)

    params  go to state 23


state 19

   14 Stmt: ID EQ . Expr SEMICOLON

    ID      shift, and go to state 24
    NUMBER  shift, and go to state 25

    Expr  go to state 26


state 20

   15 Stmt: WRITE ID . SEMICOLON

    SEMICOLON  shift, and go to state 27


state 21

   13 StmtList: Stmt StmtList .

    $default  reduce using rule 13 (StmtList)


state 22

   10 params: TYPE . ID COMMA params
   11       | TYPE . ID

    ID  shift, and go to state 28


state 23

    8 FuncDecl: TYPE ID LPAREN params . RPAREN

    RPAREN  shift, and go to state 29


state 24

   17 Expr: ID .

    $default  reduce using rule 17 (Expr)


state 25

   18 Expr: NUMBER .

    $default  reduce using rule 18 (Expr)


state 26

   14 Stmt: ID EQ Expr . SEMICOLON
   16 Expr: Expr . BinOp Expr

    SEMICOLON  shift, and go to state 30
    PLUS       shift, and go to state 31

    BinOp  go to state 32


state 27

   15 Stmt: WRITE ID SEMICOLON .

    $default  reduce using rule 15 (Stmt)


state 28

   10 params: TYPE ID . COMMA params
   11       | TYPE ID .

    COMMA  shift, and go to state 33

    $default  reduce using rule 11 (params)


state 29

    8 FuncDecl: TYPE ID LPAREN params RPAREN .

    $default  reduce using rule 8 (FuncDecl)


state 30

   14 Stmt: ID EQ Expr SEMICOLON .

    $default  reduce using rule 14 (Stmt)


state 31

   19 BinOp: PLUS .

    $default  reduce using rule 19 (BinOp)


state 32

   16 Expr: Expr BinOp . Expr

    ID      shift, and go to state 24
    NUMBER  shift, and go to state 25

    Expr  go to state 34


state 33

   10 params: TYPE ID COMMA . params

    TYPE  shift, and go to state 22

    $default  reduce using rule 9 (params)

    params  go to state 35


state 34

   16 Expr: Expr . BinOp Expr
   16     | Expr BinOp Expr .

    PLUS  shift, and go to state 31

    PLUS      [reduce using rule 16 (Expr)]
    $default  reduce using rule 16 (Expr)

    BinOp  go to state 32


state 35

   10 params: TYPE ID COMMA params .

    $default  reduce using rule 10 (params)
